import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import axios from 'axios';
import * as sendgrid from '@sendgrid/mail';
import adminFunctions from '../admin';
import { verifyAdminToken } from '../admin';

// Initialize Firestore
const db = admin.firestore();

// Initialize SendGrid (would be configured with environment variables in production)
// sendgrid.setApiKey(process.env.SENDGRID_API_KEY || '');

// Newsletter Generation Function
const generateNewsletter = async (): Promise<string> => {
  try {
    // 1. Collect content from sources
    const sourceData = await collectContent();
    
    // 2. Summarize content with AI
    const processedContent = await summarizeContent(sourceData);
    
    // 3. Generate newsletter HTML
    const newsletterHtml = generateNewsletterHtml(processedContent);
    
    // 4. Save to Firestore
    const newsletterRef = await db.collection('newsletters').add({
      content: processedContent,
      html: newsletterHtml,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      status: 'draft'
    });
    
    return newsletterRef.id;
  } catch (error) {
    console.error('Error generating newsletter:', error);
    throw error;
  }
};

// Content Collection Function
const collectContent = async () => {
  // This would be expanded to collect from multiple sources
  try {
    // Example: Get content sources from Firestore
    const sourcesSnapshot = await db.collection('contentSources')
      .where('active', '==', true)
      .get();
    
    const sourceData = [];
    for (const doc of sourcesSnapshot.docs) {
      const source = doc.data();
      
      // Basic scraping logic (would be more sophisticated in production)
      try {
        const response = await axios.get(source.url);
        sourceData.push({
          id: doc.id,
          name: source.name,
          url: source.url,
          content: response.data,
          // You would extract relevant content using cheerio or similar
        });
      } catch (error) {
        console.error(`Error fetching source ${source.name}:`, error);
      }
    }
    
    return sourceData;
  } catch (error) {
    console.error('Error collecting content:', error);
    throw error;
  }
};

// AI Content Summarization
const summarizeContent = async (sourceData: any[]) => {
  // In production, this would call OpenRouter API or similar
  // Here's a placeholder for the implementation
  
  return sourceData.map(source => ({
    ...source,
    summary: `This is a placeholder summary for content from ${source.name}. In production, this would be generated by an AI model.`,
  }));
};

// Newsletter HTML Generation
const generateNewsletterHtml = (processedContent: any[]) => {
  // Basic HTML template
  const contentHtml = processedContent.map(item => `
    <div style="margin-bottom: 20px;">
      <h2>${item.name}</h2>
      <p>${item.summary}</p>
      <a href="${item.url}">Read more</a>
    </div>
  `).join('');
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>GeoBit Newsletter</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 600px; margin: 0 auto; padding: 20px; }
        h1 { color: #2c3e50; }
        a { color: #3498db; }
      </style>
    </head>
    <body>
      <h1>GeoBit Newsletter</h1>
      <p>The latest news and research in geosciences:</p>
      ${contentHtml}
      <hr>
      <p>You received this email because you subscribed to GeoBit. <a href="##UNSUBSCRIBE_LINK##">Unsubscribe</a></p>
    </body>
    </html>
  `;
};

// Send Newsletter Function
const sendNewsletter = async (newsletterId: string) => {
  try {
    // Get newsletter data
    const newsletterDoc = await db.collection('newsletters').doc(newsletterId).get();
    
    if (!newsletterDoc.exists) {
      throw new Error(`Newsletter with ID ${newsletterId} not found`);
    }
    
    const newsletter = newsletterDoc.data();
    
    // Get subscribers
    const subscribersSnapshot = await db.collection('subscribers')
      .where('status', '==', 'active')
      .get();
    
    const subscribers = subscribersSnapshot.docs.map(doc => doc.data());
    
    // In production, you would batch send these and handle tracking
    for (const subscriber of subscribers) {
      // This is just a placeholder - in production you'd use SendGrid or similar
      console.log(`Sending newsletter to ${subscriber.email}`);
      
      // Example SendGrid implementation (commented out)
      /*
      await sendgrid.send({
        to: subscriber.email,
        from: 'newsletter@geobit.example.com',
        subject: 'GeoBit Newsletter: Weekly Geoscience Update',
        html: newsletter.html,
      });
      */
    }
    
    // Update newsletter status
    await db.collection('newsletters').doc(newsletterId).update({
      status: 'sent',
      sentAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    return { success: true, recipients: subscribers.length };
  } catch (error) {
    console.error('Error sending newsletter:', error);
    throw error;
  }
};

// HTTP Function to generate newsletter on demand
const generateNewsletterOnDemand = functions.https.onCall(async (data, context) => {
  try {
    // Verify admin token
    const { token } = data;
    const isValidToken = await verifyAdminToken(token);
    
    if (!isValidToken) {
      throw new Error('Unauthorized access');
    }
    
    const newsletterId = await generateNewsletter();
    return { success: true, newsletterId };
  } catch (error) {
    console.error('Error generating newsletter on demand:', error);
    return { success: false, error: error.message };
  }
});

// HTTP Function to publish newsletter
const publishNewsletter = functions.https.onCall(async (data, context) => {
  try {
    // Verify admin token
    const { token, newsletterId } = data;
    const isValidToken = await verifyAdminToken(token);
    
    if (!isValidToken) {
      throw new Error('Unauthorized access');
    }
    
    if (!newsletterId) {
      throw new Error('Newsletter ID is required');
    }
    
    // Update status to published
    await db.collection('newsletters').doc(newsletterId).update({
      status: 'published',
      publishedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    
    // Send newsletter to subscribers
    const result = await sendNewsletter(newsletterId);
    
    return { success: true, ...result };
  } catch (error) {
    console.error('Error publishing newsletter:', error);
    return { success: false, error: error.message };
  }
});

// Export functions
export default {
  generateNewsletter,
  generateNewsletterOnDemand,
  publishNewsletter,
};